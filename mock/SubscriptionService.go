// Code generated by mockery v2.33.0. DO NOT EDIT.

package mock

import (
	mailbus "github.com/quantonganh/mailbus"
	mock "github.com/stretchr/testify/mock"
)

// SubscriptionService is an autogenerated mock type for the SubscriptionService type
type SubscriptionService struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: email
func (_m *SubscriptionService) FindByEmail(email string) (*mailbus.Subscription, error) {
	ret := _m.Called(email)

	var r0 *mailbus.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mailbus.Subscription, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *mailbus.Subscription); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailbus.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: status
func (_m *SubscriptionService) FindByStatus(status string) ([]mailbus.Subscription, error) {
	ret := _m.Called(status)

	var r0 []mailbus.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]mailbus.Subscription, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) []mailbus.Subscription); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mailbus.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByToken provides a mock function with given fields: token
func (_m *SubscriptionService) FindByToken(token string) (*mailbus.Subscription, error) {
	ret := _m.Called(token)

	var r0 *mailbus.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*mailbus.Subscription, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) *mailbus.Subscription); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailbus.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: s
func (_m *SubscriptionService) Insert(s *mailbus.Subscription) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mailbus.Subscription) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: token
func (_m *SubscriptionService) Subscribe(token string) (string, error) {
	ret := _m.Called(token)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: email
func (_m *SubscriptionService) Unsubscribe(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: email, token
func (_m *SubscriptionService) Update(email string, token string) error {
	ret := _m.Called(email, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(email, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSubscriptionService creates a new instance of SubscriptionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriptionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscriptionService {
	mock := &SubscriptionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
